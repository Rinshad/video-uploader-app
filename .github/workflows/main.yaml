name: CI/CD Pipeline Video uploader app

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: cd spa && npm ci

      - name: Run linter
        run: cd spa && npm run lint

  #build-scan-push:
  #  runs-on: ubuntu-latest
  #  needs: lint-and-test
  #  steps:
  #    - uses: actions/checkout@v3
#
  #    - name: Set up QEMU
  #      uses: docker/setup-qemu-action@v2
#
  #    - name: Set up Docker Buildx
  #      uses: docker/setup-buildx-action@v2
  #  
  #    - name: SonarQube Scan
  #      uses: SonarSource/sonarcloud-github-action@master
  #      env:
  #        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
#
  #    - name: Login to DockerHub
  #      uses: docker/login-action@v2
  #      with:
  #        username: ${{ secrets.DOCKERHUB_USERNAME }}
  #        password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#
  #    - name: Extract Git commit info
  #      id: git_info
  #      run: |
  #        echo "Commit SHA: ${GITHUB_SHA}"
  #        echo "Short SHA: ${GITHUB_SHA::7}"
  #        echo "Branch: ${GITHUB_REF##*/}"
  #        echo "::set-output name=sha_short::${GITHUB_SHA::7}"
  #        echo "::set-output name=branch::${GITHUB_REF##*/}"
  #
  #    - name: Build and push SPA image
  #      run: docker buildx build --platform linux/amd64 --file Dockerfile.react --tag ${{ secrets.DOCKERHUB_USERNAME }}/spa:${{ steps.git_info.outputs.sha_short }} --push .
  #             
  #    - name: Build and push API image
  #      run: docker buildx build --platform linux/amd64 --file Dockerfile.rails --tag ${{ secrets.DOCKERHUB_USERNAME }}/api:${{ steps.git_info.outputs.sha_short }} --push .
  #             
  #    - name: Build and push NGINX image
  #      run: docker buildx build --platform linux/amd64 --file Dockerfile.nginx --tag ${{ secrets.DOCKERHUB_USERNAME }}/nginx:${{ steps.git_info.outputs.sha_short }} --push .
          
  deploy:
    runs-on: ubuntu-latest
   # needs: build-scan-push
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      - name: Deploy kind cluster
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./kind_cluster
      
      - name: Wait for Kind Cluster to be ready
        run: |
          echo "Waiting for Kind cluster to be ready..."
          for i in {1..30}; do
            if kubectl get nodes | grep -q "Ready"; then
              echo "Kind cluster is ready!"
              break
            fi
            echo "Waiting for 10 seconds..."
            sleep 10
          done
        working-directory: ./kind_cluster
          
      - name: Ingress installation
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
      
      - name: Wait for ingress to be ready
        run: |
          echo "Waiting for the ingress to be ready..."
          for i in {1..30}; do
            if kubectl get pods -n ingress-nginx | grep -q 'Running'; then
              echo "Application is running!"
              break
            fi
            echo "Waiting for 30 seconds..."
            sleep 30
          done
      - name: Update values.yaml with secrets
        run: |
          sed -i "s|^\( *DB_PASS: \).*|\1${{ secrets.DB_PASSWORD }}|" values.yaml
          sed -i "s|^\( *DB_USER: \).*|\1${{ secrets.DB_USER }}|" values.yaml
          sed -i "s|^\( *SECRET_KEY_BASE: \).*|\1${{ secrets.SECRET_KEY_BASE }}|" values.yaml
  
      - name: Application deployment using terraform
        run: |
          terraform init
          terraform apply -auto-approve -var="image_tag=${{ steps.git_info.outputs.sha_short }}"
        working-directory: ./app-deploy
      
      - name: Wait for all pods to be ready
        run: |
          echo "Waiting for all application pods to be ready..."
          sleep 30
          for i in {1..30}; do
            total_pods=$(kubectl get pods -n video-uploader --no-headers | wc -l)
            running_pods=$(kubectl get pods -n video-uploader --no-headers | grep -c 'Running')
            
            if [ "$total_pods" -eq "$running_pods" ] && [ "$total_pods" -ne 0 ]; then
              echo "All pods are running!"
              break
            fi
            
            echo "Waiting for 10 seconds, still waiting for some pods to be ready..."
            sleep 10
          done
      
      - name: Run Smoke Tests
        run: |
          kubectl get pods,services,ing -n video-uploader
          echo "127.0.0.1 example.org" | sudo tee -a /etc/hosts
          #kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- curl -m 10 http://example.org/health
          curl -m 10 http://example.org/health

  notify:
     runs-on: ubuntu-latest
     needs: [deploy]  
     if: always()  
     steps:
       - name: Notify Deployment Status Slack
         uses: 8398a7/action-slack@v3
         with:
           status: ${{ needs.deploy.result }} 
           text: Deployment ${{ needs.deploy.result == 'success' && 'succeeded' || 'failed' }}!
         env:
           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
