name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
    - name: Install dependencies
      run: cd spa && npm ci
    - name: Run linter
      run: cd spa && npm run lint

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.rails
        push: true
        tags: ${{ env.DOCKERHUB_USERNAME }}/api:${{ github.sha }}
    - name: Build and push images
      run: |
        docker buildx build --platform linux/amd64 --file Dockerfile.rails --tag ${{ env.DOCKERHUB_USERNAME }}/sidekiq:latest --push .
        docker buildx build --platform linux/amd64 --file Dockerfile.react --tag ${{ env.DOCKERHUB_USERNAME }}/spa:latest --push .
        docker buildx build --platform linux/amd64 --file Dockerfile.nginx --tag ${{ env.DOCKERHUB_USERNAME }}/nginx:latest --push .

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - uses: actions/checkout@v3
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0
    - name: Initialize Terraform
      run: terraform init -upgrade
      working-directory: ./infra

    - name: Apply Terraform Configuration
      run: terraform apply -auto-approve
      working-directory: ./infra

    - name: Install Helm
      run: |
        sleep 30
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    
    - name: Deploy Helm Chart
      run: |
        helm upgrade --install video-uploader ./Helm_Chart -n video-uploader --create-namespace \
          --set image.tag=latest

    - name: Run Smoke Tests
      run: |
        sleep 40
        kubectl get pods,services,ing -n video-uploader
        kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- \
        curl -m 5 http://nginx.video-uploader.svc.cluster.local:8000/health
        

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}!
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}