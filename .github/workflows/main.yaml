name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Install dependencies
        run: cd spa && npm ci

      - name: Run linter
        run: cd spa && npm run lint

  build-scan-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        image_name: [api, sidekiq, spa, nginx]
        dockerfile: [Dockerfile.rails, Dockerfile.rails, Dockerfile.react, Dockerfile.nginx]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    
      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.32.1/trivy_0.32.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.32.1_Linux-64bit.deb

      - name: Build and scan image
        run: |
          docker buildx build --platform linux/amd64 --file ${{ matrix.dockerfile }} --tag ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}:latest .
          trivy image --exit-code 0 --ignore-unfixed --severity CRITICAL,HIGH --format table ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image_name }}:latest   

  deploy:
    runs-on: ubuntu-latest
    needs: build-scan-push
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Initialize Terraform
        run: terraform init -upgrade
        working-directory: ./infra

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve
        working-directory: ./infra

      - name: Initialize Terraform for app
        working-directory: ./app-deploy
        run: terraform init

      - name: Apply Terraform Configuration for application
        working-directory: ./app-deploy
        run: |
          sleep 30
          terraform apply -auto-approve

      - name: Run Smoke Tests
        run: |
          sleep 40
          kubectl get pods,services,ing -n video-uploader
          kubectl run curl --image=curlimages/curl -i --rm --restart=Never -- \
          curl -m 5 http://nginx.video-uploader.svc.cluster.local:8000/health

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
