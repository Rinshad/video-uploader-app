name: CI/CD Pipeline for Rails and React Apps

on:
  push:
    branches:
      - master

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.3
          bundler-cache: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'yarn'

      - name: Lint Rails API
        working-directory: ./api
        run: |
          gem install rubocop
          rubocop

      - name: Run Rails API Unit Tests
        working-directory: ./api
        run: |
          bundle exec rspec

      - name: Lint React SPA
        working-directory: ./spa
        run: |
          yarn install
          yarn lint

      - name: Run React SPA Unit Tests
        working-directory: ./spa
        run: |
          yarn test --ci --coverage

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push API image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.rails \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/api:latest \
            --push .

      - name: Build and push Sidekiq image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.rails \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/sidekiq:latest \
            --push .

      - name: Build and push SPA image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.react \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/spa:latest \
            --push .

      - name: Build and push Nginx image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --file Dockerfile.nginx \
            --tag ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest \
            --push .

      - name: Upload Trivy scan result as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  provision-kind-cluster:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init -upgrade

      - name: Apply Terraform Configuration
        working-directory: ./infra
        run: terraform apply -auto-approve

      - name: Cluster uptime
        run: sleep 30 

      - name: Verify Kind Cluster
        run: |
          kubectl get nodes
          kubectl cluster-info

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Create Namespace
        run: |
          kubectl create namespace video-uploader || echo "Namespace video-uploader already exists"

      - name: Deploy Helm Chart
        run: |
          cd Helm_Chart
          helm install video-uploader . -n video-uploader
          sleep 60

      - name: Modify /etc/hosts
        run: |
          echo "127.0.0.1 video-app.local" | sudo tee -a /etc/hosts

      - name: Post-Deployment Tests
        run: |
          kubectl get ing -n video-uploader
          kubectl get pods -n video-uploader
          kubectl get svc -n video-uploader
          sleep 30
          kubectl run test-pod --namespace=video-uploader --image=busybox --rm -it -- wget -qO- http://nginx.video-uploader.svc.cluster.local:8000

      - name: Load Testing
        run: |
          kubectl run k6-test --namespace=video-uploader --image=loadimpact/k6 --rm -it -- \
          run --vus 10 --duration 30s https://video-app.local
