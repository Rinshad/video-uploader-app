apiVersion: v1
kind: Secret
metadata:
  name: db-secret
type: Opaque
data:
  POSTGRES_PASSWORD: cGFzc3dvcmQ= 
  DB_USER: cG9zdGdyZXM= 
  SECRET_KEY_BASE: MWY1ZjJiODE4YWEyZmQ0Y2YyZTllMzU2ZjFhMjM1ZWRkNGEzYWMzZmNiYmY4ZTYxZDAyZjYyMTNmNDJkYWRkZjEwMGUwZWFkNzI5OWUyYWIwYjcyMTQwYWJhMjI4YWU0NGZjZmIyNmE5MTI1YzZjN2RkZGQ2NTdhZmVkMmQ1ZTk= 

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-0
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/postgres-0

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: "postgres"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:12.8
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: rinshadr/nginx:latest
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: nginx-storage
          mountPath: /usr/share/nginx/html
      volumes:
      - name: nginx-storage
        persistentVolumeClaim:
          claimName: nginx-pvc
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nginx-pv
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/nginx 

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7.0.8
        ports:
        - containerPort: 6379

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: api-pv
spec:
  capacity:
    storage: 1Gi 
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/data/api 

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: docker.io/rinshadr/api:v0.0.1
        ports:
        - containerPort: 3000
        env:
        - name: REDIS_URL
          value: 'redis://redis:6379/1'
        - name: DB_HOST
          value: postgres
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_USER
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: SECRET_KEY_BASE
        volumeMounts:
        - name: api-storage
          mountPath: /app/storage
      volumes:
      - name: api-storage
        persistentVolumeClaim:
          claimName: api-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: db

---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: api

---
apiVersion: v1
kind: Service
metadata:
  name: spa
spec:
  ports:
  - port: 4000
    targetPort: 4000
  selector:
    app: spa

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: nginx
---
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sidekiq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sidekiq
  template:
    metadata:
      labels:
        app: sidekiq
    spec:
      containers:
      - name: sidekiq
        image: docker.io/rinshadr/sidekiq:latest
        env:
        - name: REDIS_URL
          value: 'redis://redis:6379/1'
        - name: DB_HOST
          value: postgres
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: DB_USER
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: POSTGRES_PASSWORD
        - name: SECRET_KEY_BASE
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: SECRET_KEY_BASE
        command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spa
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spa
  template:
    metadata:
      labels:
        app: spa
    spec:
      containers:
      - name: spa
        image: docker.io/rinshadr/spa:latest
        ports:
        - containerPort: 4000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
spec:
  rules:
  - host: myapp.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port:
              number: 8000